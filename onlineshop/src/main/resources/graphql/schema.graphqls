type Good{
    id: Int!
    name: String!
    price: Float!
    amount: Int!
    canBeSold: Boolean!
}

type CartGood{
    good: Good!,
    amount: Int!
}

input GoodAdd{
    name: String!
    price: Float!
}

input AlterGood{
    id: Int!
    name: String
    price: Float
    amount: Int
    canBeSold: Boolean
}

input GoodAmount{
    goodId: Int!
    amount: Int!
}

type OrderGood{
    good: Good!
    price: Float!
    amount: Int!
}

type Order{
    id: Int!
    goods: [OrderGood!]!
    status: Int!
    price: Float!
}

type OrderAndUser{
    id: Int!
    goods: [OrderGood!]!
    status: Int!
    price: Float!
    userId: Int!
}

type Query{
    getGoodsList: [Good!]!
    getGood(id: Int!): Good!
    findGoods(name: String!): [Good!]!
    getOrders: [Order!]!
    getOrdersByStatus(status_min: Int!, status_max: Int!): [OrderAndUser!]!
    getCart: [CartGood!]!
}

type Mutation{
    addGood(goods: [GoodAdd!]!): String!
    alterGood(goods: [AlterGood!]!): String!
    addGoodsToCart(ids: [Int!]!): String!
    delGoodsFromCart(ids: [Int!]!): String!
    alterCartGoodAmounts(goods: [GoodAmount!]!): String!
    setOrderStatus(id: Int!, status: Int!): String!
    createOrder(buyAvailable: Boolean!): String!
}